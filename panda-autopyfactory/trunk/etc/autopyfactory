#!/bin/bash
#
#	/etc/rc.d/init.d/autopyfactory
#
# Starts the autopyfactory daemon
#
# chkconfig: 345 26 74
# description: Submit pilot jobs to grid sites. 
# processname: autopyfactory
# config: /etc/autopyfactory/autopyfactory.conf 
# pidfile: /var/run/autopyfactory.pid
#
#

### BEGIN INIT INFO
# Provides: autopyfactory.py
# Required-Start: $syslog $local_fs
# Required-Stop: $syslog $local_fs
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop autopyfactory
# Description: Submit PANDA pilots. 
### END INIT INFO

f_factdir(){
    # little function to find out where actually
    # this script is located.
    # In case of an user custom installation it could
    # be in a place different that both /etc/init.d/ or the $HOME dir.
    # The current location is recorded in variable FACTDIR
    
    OLD_DIR=$PWD
    DIRPATH=`dirname $0`
    cd $DIRPATH
    FACTDIR=$PWD
    cd $OLD_DIR
}

# Source function library.
# Standard RedHat
if [ -f /etc/rc.d/init.d/functions ]; then
   . /etc/rc.d/init.d/functions
fi

# Use LSB locations for e.g. SuSE
if [ -f /lib/lsb/init-functions ]; then
   . /lib/lsb/init-functions
fi

# Source standard environment
for i in /etc/profile.d/*.sh; do
    if [ -r "$i" ]; then
            . $i >/dev/null 2>&1
    fi
done

# Determine usage context and set paths accordingly.  
#   -- for root it means RPM
#   -- for non-root, the head of the path tree can be calculated from the output of f_factdir
#      the relative paths for the rest of files are like ../bin, ../var, etc.

f_factdir

if [ `id -u` = 0 ]; then
    APFHEAD=/
    SYSCONF=/etc/sysconfig/autopyfactory
    BINDIR=/usr/bin
    ETCDIR=/etc/autopyfactory
    PIDFILE=/var/run/autopyfactory.pid
else
    APFHEAD=`dirname $FACTDIR`

    SYSCONF=$APFHEAD/etc/autopyfactory
    BINDIR=$APFHEAD/bin
    ETCDIR=$APFHEAD/etc
    PIDFILE=$APFHEAD/var/run/autopyfactory.pid
fi

CONFFILE=$ETCDIR/autopyfactory.conf

# Source settings from sysconfig
# overriding default if present

if [ -f $SYSCONF ]; then
   . $SYSCONF
fi

if [ -f /etc/profile ]; then
   . /etc/profile
fi

if [ -n "$GRIDSETUP" ]; then
   . $GRIDSETUP
fi



RETVAL=0
#
# See how we were called.
#
check() {
	
	# Check if autopyfactory.py is executable
	test -x $BINDIR/autopyfactory || exit 5
}

create_var_run(){
    # function to create directory  $APFHEAD/var/run 
    # if it does not exist. 
    # It is needed to place the file autopyfactory.pid 
    if [ ! -d $APFHEAD/var/run/ ]; then
        mkdir -p $APFHEAD/var/run/
    fi
}

create_var_log(){
    # function to create directory  $APFHEAD/var/log/autopyfactory 
    # if it does not exist. 
    if [ ! -d $APFHEAD/var/log/autopyfactory ]; then
        mkdir -p $APFHEAD/var/log/autopyfactory/
    fi
}


start() {
	# Check if it is already running
	PROGRETVAL=0
	if [ ! -f $PIDFILE ]; then
		echo -n $"Starting AutoPyFactory daemon: "	
        create_var_run
        create_var_log
	    # daemon --pidfile=${PIDFILE} "$BINDIR/autopyfactory --conf $CONFFILE $OPTIONS "
        if [ -n "$CONSOLE_LOG" ]; then
        	$BINDIR/autopyfactory --conf $CONFFILE $OPTIONS >> $CONSOLE_LOG 2>&1 &
        else
            $BINDIR/autopyfactory --conf $CONFFILE $OPTIONS &
        fi
        RETVAL=$?
		PID=$!
	    [ "$RETVAL" -eq 0 ] && echo $! > $PIDFILE        

		sleep 3
		if checkpid $PID; then
			PROGRETVAL=0
		else
			wait $PID
			PROGRETVAL=$?
			rm -f $PIDFILE
		fi
        [ "$PROGRETVAL" -eq 0 ] && success $"autopyfactory startup" || failure $"autopyfactory startup"
	    echo
	else
		if checkpid $PID; then
			echo "$0: daemon with PID $PID already running." && success $"autopyfactory startup"
			PROGRETVAL=0
		else
			echo "$0: daemon dead but PID file exists: $PIDFILE" && failure $"autopyfactory startup"
	    	PROGRETVAL=1
	    fi
	fi

	return $PROGRETVAL
}

stop() {

	check
	echo -n $"Stopping AutoPyFactory daemon: "
	killproc -p $PIDFILE autopyfactory
	RETVAL=$?
	[ $RETVAL -eq 0 ] && rm -f $PIDFILE && success $"autopyfactory shutdown" || failure $"autopyfactory shutdown"
	echo
    return $RETVAL
}


restart() {
	stop
	sleep 2
	start
	RETVAL=$?
	return $RETVAL
}	

debugrestart() {
    stop
    sleep 2
    # make a copy of the latest log file
    LOG=/var/log/autopyfactory/autopyfactory.log
    # FIXME: variable LOG should be setup in the /etc/sysconfig/autopyfactory file
    mv $LOG $LOG-`date -u +%Y%m%d.%H%M%S`
    # FIXME: most probably the saved file is owned by root instead of "autopyfactory". OK for the time being
    start
    RETVAL=$?
    return $RETVAL
}

case "$1" in
start)
	start
	RETVAL=$?
	;;
stop)
	stop
    RETVAL=$?
	;;
restart)
	restart
	RETVAL=$?
	;;
debugrestart)
	debugrestart
	RETVAL=$?
	;;
condrestart)
	if [ -f /var/lock/subsys/autopyfactory ]; then
	    restart
	fi
	RETVAL=$?
	;;
status)
	status autopyfactory
	RETVAL=$?
	;;
*)
	echo $"Usage: $0 {start|stop|status|restart|condrestart}"
	RETVAL=2
esac

exit $RETVAL
