---# Deployment using RPM

Installation as root via RPMs has now been quite simplified. These instructions assume Red Hat /
Enterprise Linux 6.x (and derivates) and the system Python 2.6.x. Other distros and higher 
Python versions should work with some extra work. 

1) Install and enable a supported batch system. Condor is the current supported default. /
Software available from  http://www.cs.wisc.edu/condor/. Condor/Condor-G setup and 
configuration is beyond the scope of this documentation. Ensure that it is working
properly before proceeding. 

2) Install a grid client and set up the grid certificate+key under the user APF will run as. 
Please read the section [[#4_4_proxy_conf][proxy.conf]] regarding the proxy.conf file, so you see what 
will be needed. Make sure voms-proxy-* commands work properly. 

3) Add the racf-grid YUM repo to your system

<pre class="rootscreen">
%UCL_PROMPT_ROOT% rpm -ivh http://dev.racf.bnl.gov/yum/autopyfactory/production/rhel/6Workstation/x86_64/autopyfactory-release-latest.noarch.rpm </pre>

<!--
  %UCL_PROMPT_ROOT% rpm -ivh http://dev.racf.bnl.gov/yum/grid/production/rhel/6Workstation/x86_64/racf-grid-release-latest.noarch.rpm</pre>
-->                                                     

The warning about NOKEY is expected. This release RPM sets up YUM to point at our 
repository, and installs the GPG key with which all our RPMs are signed. By default
the racf-grid-release RPM sets our production repository to enabled (see 
=/etc/yum.repos.d/autopyfactory.repo=). 

*NOTE*: If you are testing APF and want to run
a pre-release version, enable the racf-grid-development or racf-grid-testing repository. 

4) If you will be performing *local* batch system submission (as opposed to remote submission
via grid interfaces) you must confirm that whatever account you'll be submitting as exists on
the batch cluster. This is also the user you should set APF to run as. 

*NOTE*: You do not want local batch logs being written to NFS, so you will need to define a 
local directory for logs and be sure the APF user can write there. 


5) Install the APF RPM:

<pre class="rootscreen">
%UCL_PROMPT_ROOT% yum install autopyfactory</pre>
   

This performs several setup steps that otherwise would need to be done manually:

   * Creates 'autopyfactory' user that APF will run under.
   * Enables the factory init script via chkconfig.
   * Pulls in the panda userinterface Python library RPM from our repository. 
   * Pulls in the python-simplejson RPM from the standard repository.

*NOTE*: If the yum install command did not work as expected, and no package was installed, or the version is too old, you should probably want to enable the development repository. 
Edit the file =/etc/yum.repos.d/racf-grid-development.repo=  and set 
<pre class="file">
enabled=1
</pre>   

6) Copy the configuration files to the right place.

<pre class="rootscreen">
%UCL_PROMPT_ROOT% cp /usr/share/doc/autopyfactory-%VERSION%/sysconfig/autopyfactory-example /etc/sysconfig/autopyfactory
%UCL_PROMPT_ROOT% cp /usr/share/doc/autopyfactory-%VERSION%/logrotate/autopyfactory-example /etc/logrotate.d/autopyfactory
%UCL_PROMPT_ROOT% cp /usr/share/doc/autopyfactory-%VERSION%/autopyfactory.conf-example  /etc/autopyfactory/autopyfactory.conf
%UCL_PROMPT_ROOT% cp /usr/share/doc/autopyfactory-%VERSION%/queues.conf-example  /etc/autopyfactory/queues.conf
%UCL_PROMPT_ROOT% cp /usr/share/doc/autopyfactory-%VERSION%/proxy.conf-example  /etc/autopyfactory/proxy.conf
%UCL_PROMPT_ROOT% cp /usr/share/doc/autopyfactory-%VERSION%/monitor.conf-example  /etc/autopyfactory/monitor.conf
%UCL_PROMPT_ROOT% cp /usr/share/doc/autopyfactory-%VERSION%/mappings.conf-example  /etc/autopyfactory/mappings.conf</pre>

Configure APF queues/job submission as desired. Read the CONFIGURATION documentation in 
   order to do this. Be sure to configure at least one queue in order to test function. 

7) Start APF:

<pre class="rootscreen">
%UCL_PROMPT_ROOT% /etc/init.d/factory start</pre>
    
8) Confirm that everything is OK:

   *  Check to see if APF is running:
<pre class="rootscreen">
%UCL_PROMPT_ROOT% /etc/init.d/factory status</pre>

   * Look at the output of ps to see that APF is running under the expected user. 
     This should show who it is running as, and the arguments in 
     =/etc/sysconfig/factory=: 

<pre class="rootscreen">
%UCL_PROMPT_ROOT% ps aux | grep autofactory | grep -v grep
502       6624  0.1  0.0 721440 12392 pts/0    Sl   Oct20   2:04 /usr/bin/python /usr/bin/autopyfactory --conf /etc/autopyfactory/autopyfactory.conf --info --sleep=60 --runas=autopyfactory --log=/var/log/autopyfactory/autopyfactory.log
</pre>

   *  Tail the log output and look for problems.

 <pre class="rootscreen">
%UCL_PROMPT_ROOT% tail -f /var/log/autopyfactory/autopyfactory.log</pre>
 
   * Check to be sure jobs are being submitted by whatever account APF is using by executing condor_q manually:  

 <pre class="rootscreen">
%UCL_PROMPT_ROOT% condor_q | grep autopyfactory</pre>

