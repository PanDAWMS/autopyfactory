#!/usr/bin/env python
#
#
#  Run proxymanager standalone
#  Runs as root and can switch ownership of output files as needed. 
#
#
#
import getopt
import sys
import os
from ConfigParser import ConfigParser

def main():
   
    debug = 0
    info = 0
    pconfig_file = None
    logfile = sys.stdout
    default_configfile = os.path.expanduser("~/etc/proxy.conf")     
    usage = """Usage: proxymanager.py [OPTIONS]  
    OPTIONS: 
        -h --help                   Print this message
        -d --debug                  Debug messages
        -v --verbose                Verbose information
        -c --config                 Config file [~/etc/proxy.conf]
        -L --log                    [ stdout ]
        """
    
    # Handle command line options
    argv = sys.argv[1:]
    try:
        opts, args = getopt.getopt(argv, 
                                   "c:hdvL:", 
                                   ["config=",
                                    "help", 
                                    "debug", 
                                    "verbose",
                                    "log=",
                                    ])
    except getopt.GetoptError, error:
        print( str(error))
        print( usage )                          
        sys.exit(1)
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(usage)                     
            sys.exit()            
        elif opt in ("-c", "--config"):
            pconfig_file = arg
        elif opt in ("-d", "--debug"):
            debug = 1
        elif opt in ("-v", "--verbose"):
            info = 1
        elif opt in ("-L", "--log"):
            logfile = arg


    # Set up logging. 
    # Check python version 
    major, minor, release, st, num = sys.version_info
    
    # Set up logging, handle differences between Python versions... 
    # In Python 2.3, logging.basicConfig takes no args
    #
    FORMAT23="[ %(levelname)s ] %(asctime)s %(filename)s (Line %(lineno)d): %(message)s"
    FORMAT24=FORMAT23
    FORMAT25="[%(levelname)s] %(asctime)s %(module)s.%(funcName)s(): %(message)s"
    FORMAT26=FORMAT25
    
    if major == 2:
        if minor ==3:
            formatstr = FORMAT23
        elif minor == 4:
            formatstr = FORMAT24
        elif minor == 5:
            formatstr = FORMAT25
        elif minor == 6:
            formatstr = FORMAT26
        elif minor == 7:
            formatstr = FORMAT26
    
    log = logging.getLogger()
    if logfile == sys.stdout:
        hdlr = logging.StreamHandler(logfile)
    else:
        hdlr = logging.FileHandler(filename=logfile) 
    
    formatter = logging.Formatter(FORMAT23)
    hdlr.setFormatter(formatter)
    log.addHandler(hdlr)
    
    if debug: 
        log.setLevel(logging.DEBUG) # Override with command line switches
    if info:
        log.setLevel(logging.INFO) # Override with command line switches
    log.info("Logging initialized.")      
    
    # Read in config file
    pconfig=ConfigParser()
    if not pconfig_file:
        pconfig_file = os.path.expanduser(default_configfile)
    else:
        pconfig_file = os.path.expanduser(pconfig_file)
    got_config = pconfig.read(pconfig_file)
    log.debug("Read config file %s, return value: %s" % (pconfig_file, got_config))
    
    pm = ProxyManager(pconfig)
    pm.start()
    
    try:
        while True:
            time.sleep(2)
            log.debug('Checking for interrupt.')
    except (KeyboardInterrupt): 
        log.info("Shutdown via Ctrl-C or -INT signal.")
        pm.stopevent.set()
        
if __name__ == "__main__":
    main()
