#!/usr/bin/env python 

"""
Output a factory config file only outputs ACTIVE sites
"""

import logging
from optparse import OptionParser
from urllib import urlopen
import sys
try:
    import json as json
except ImportError, err:
    import simplejson as json

blacksites = [
              'IAAS',
              'Australia-NECTAR',
              'HELIX',
              'CERN-P1',
              'CERN-RELEASE',
              'SARA-MATRIX',
              'ZA-WITS-CORE',
]

defaultsection = """\

[DEFAULT]

vo = ATLAS
status = online
override = True
enabled = True
autofill = False

cleanlogs.keepdays = 7

# plugins
batchstatusplugin = Condor
wmsstatusplugin = Panda
configplugin = Panda
batchsubmitplugin = CondorCREAM
batchsubmit.condorcream.proxy = atlas-production

schedplugin = Activated
sched.activated.min_pilots_per_cycle = 0
sched.activated.max_pilots_per_cycle = 20
sched.activated.max_jobs_torun = 9999
sched.activated.max_pilots_pending = 50
sched.activated.testmode.allowed = True
sched.activated.testmode.pilots = 1
sched.activated.testmode.max_pending = 12

executable = /data/atlpan/libexec/runpilot3-wrapper-jan29.sh
executable.defaultarguments = -s %(wmsqueue)s -h %(batchqueue)s -p 25443 -w https://pandaserver.cern.ch -j false -k %(memory)s

batchsubmit.condorcream.environ = APF_PYTHON26=1 RUCIO_ACCOUNT=pilot

apfqueue.sleep = 60

"""

def main():

    parser = OptionParser(usage='''%prog [OPTIONS]
Output a factory queue configuration using ACTIVE sites from the
specified cloud and activity type.
''')
    parser.add_option("-c",
                       dest="cloud",
                       action="store",
                       default='ALL',
                       type="string",
                       help="name of cloud")
    parser.add_option("-a",
                       dest="activity",
                       default="analysis",
                       action="store",
                       type="choice",
                       choices=['analysis','production'],
                       help="activity filter ('analysis' [default] or 'production')")
    parser.add_option("-q", "--quiet",
                       dest="loglevel",
                       default=logging.WARNING,
                       action="store_const",
                       const=logging.WARNING,
                       help="Set logging level to WARNING [default]")
    parser.add_option("-v", "--info",
                       dest="loglevel",
                       default=logging.WARNING,
                       action="store_const",
                       const=logging.INFO,
                       help="Set logging level to INFO [default WARNING]")

    (options, args) = parser.parse_args()

    logger = logging.getLogger()
    logger.setLevel(options.loglevel)
    fmt = '[APF:%(levelname)s %(asctime)s] %(message)s'
    formatter = logging.Formatter(fmt, '%T')
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(formatter)
    logger.handlers = []
    logger.addHandler(handler)
    
    msg = 'Cloud: %s' % options.cloud.upper()
    logging.info(msg)
    msg = 'Activity: %s' % options.activity
    logging.info(msg)
    url = 'http://atlas-agis-api.cern.ch/request/pandaqueue/query/list/?json&preset=schedconf.all'
    if options.cloud.upper() != 'ALL':
        url += '&cloud=%s' % options.cloud.upper()
    logging.info(url)

    handle = urlopen(url)
    d = json.load(handle, 'utf-8')
    handle.close()

    print "# auto-generated by: agis.py %s" % ' '.join(sys.argv[1:])

    print defaultsection
    
    for key in sorted(d):
        try:
            if d[key]['site'] in blacksites:
                print
		print "# Excluded: %s" % key
		continue
            if d[key]['site_state'] == 'ACTIVE' and d[key]['type'] == options.activity:

                wmsqueue = d[key]['panda_resource']
                cetype = d[key]['type']
                memory = d[key]['memory']
                
                for q in d[key]['queues']:
                    gramqueue = None 
                    nordugridrsl = None 
            
                    if q['ce_flavour'] == 'OSG-CE':
            
                        gridresource = '%s/jobmanager-%s' %(q['ce_endpoint'], q['ce_jobmanager'])
                        if q['ce_version'] == 'GT2':
                            submitplugin = 'CondorGT2'
                            submitpluginstring = 'condorgt2'
                            gramversion = 'gram2'
                        if q['ce_version'] == 'GT5':
                            submitplugin = 'CondorGT5'
                            submitpluginstring = 'condorgt5'
                            gramversion = 'gram5'
                        if q['ce_queue_name']:
                            gramqueue = q['ce_queue_name']
            
                    elif q['ce_flavour'] == 'CREAM-CE':
            
                        gridresource = '%s/ce-cream/services/CREAM2 %s %s' %(q['ce_endpoint'], q['ce_jobmanager'], q['ce_queue_name'])
                        submitplugin = 'CondorCREAM'
                        submitpluginstring = 'condorcream'
            
                    elif q['ce_flavour'] == 'LCG-CE':
                        print
                        print "# Skipping GT2 queue: %s (%s)" % (key, q['ce_queue_id'])
                        continue
                        gridresource = '%s/jobmanager-%s' %(q['ce_endpoint'], q['ce_jobmanager'])
                        submitplugin = 'CondorGT2'
                        submitpluginstring = 'condorgt2'
                        gramversion = 'gram2'
                        gramqueue = q['ce_queue_name']
                        
                    elif q['ce_flavour'] == 'ARC-CE':
                        gridresource = q['ce_endpoint']
                        submitplugin = 'CondorNordugrid'
                        submitpluginstring = 'condornordugrid'
			nordugridrsl = '(jobname = "prod_pilot")(runtimeenvironment = APPS/HEP/ATLAS-SITE-LCG)(runtimeenvironment = ENV/PROXY )'
                    else:
                        print
                        print "# Unknown ce_flavour for ce_queue_id: %s" % q['ce_queue_id']
                        continue
            
                    print
                    print '[%s-%s]' % (d[key]['nickname'], q['ce_queue_id'])
                    print 'enabled = True'
                    print 'autofill = False'
                    print 'batchqueue = %s' % key
                    print 'wmsqueue = %s' % wmsqueue
                    print 'memory = %s' % memory
                    print 'batchsubmitplugin = %s' % submitplugin
                    print 'batchsubmit.%s.gridresource = %s' % (submitpluginstring, gridresource)
                    # times 3 hack until tuning is sorted
                    print 'sched.activated.max_pilots_pending = %s' % max(9,d[key]['nqueue'] * 3)
                    if nordugridrsl:
                        print 'batchsubmit.condornordugrid.nordugridrsl = %s' % nordugridrsl
                        print 'batchsubmit.condornordugrid.queue = %s' % q['ce_queue_name']
                    if gramqueue:
                        print 'globusrsl.%s.queue = %s' % (gramversion, gramqueue)
                    if cetype == 'analysis':
                        print 'batchsubmit.%s.proxy = atlas-analysis' % submitpluginstring
                        print 'executable.arguments = %(executable.defaultarguments)s -u user'
                    elif cetype == 'production':
                        print 'batchsubmit.%s.proxy = atlas-production' % submitpluginstring
                        print 'executable.arguments = %(executable.defaultarguments)s'


        except KeyError, e:
          print '# Key error: %s' % e
          print

if __name__ == "__main__":
    sys.exit(main())
