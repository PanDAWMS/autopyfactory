#!/usr/bin/env python 

"""
Output a factory config file only outputs ACTIVE sites

Parameters taken from AGIS include:
resource_type
vo_name
site_state
panda_resource
type
memory
corecount
nickname
queues
  ce_state
  ce_flavour
  ce_name
  ce_endpoint
  ce_jobmanager
  ce_queue_name
  ce_queue_id
  

"""

import logging
from optparse import OptionParser
from urllib import urlopen
import sys
try:
    import json as json
except ImportError, err:
    import simplejson as json

defaultsection = """\

[DEFAULT]

vo = ATLAS
status = online
override = True
enabled = True

cleanlogs.keepdays = 7

# plugins
batchstatusplugin = Condor
wmsstatusplugin = Panda
schedplugin = Ready
monitorsection = apfmon-lancaster

schedplugin = Ready, StatusTest, MaxToRun, MinPerCycle, MaxPerCycle, MaxPending, StatusOffline
sched.statustest.allowed = True
sched.statustest.pilots = 1
sched.statusoffline.allowed = True
sched.statusoffline.pilots = 0
sched.minpercycle.minimum = 0
sched.maxpending.maximum = 5

executable = /etc/apf/runpilot3-wrapper-oct02.sh
executable.defaultarguments = -s %(wmsqueue)s -h %(batchqueue)s -p 25443 -w https://pandaserver.cern.ch -j false -k %(memory)s

req = requirements = JobRunCount == 0
hold = periodic_hold = ( JobStatus==1 && gridjobstatus=?=UNDEFINED && CurrentTime-EnteredCurrentStatus>3600 ) || ( JobStatus == 1 && (JobRunCount =!= UNDEFINED && JobRunCount > 0) )
remove = periodic_remove = (JobStatus == 5 && (CurrentTime - EnteredCurrentStatus) > 3600) || (JobStatus == 1 && globusstatus =!= 1 && (CurrentTime - EnteredCurrentStatus) > 86400)

apfqueue.sleep = 300

"""

def main():

    parser = OptionParser(usage='''%prog [OPTIONS]
Output a factory queue configuration using ACTIVE sites from the
specified cloud and activity type.
''')
    parser.add_option("-c",
                       dest="cloud",
                       action="store",
                       default='ALL',
                       type="string",
                       help="name of cloud")
    parser.add_option("-a",
                       dest="activity",
                       default="analysis",
                       action="store",
                       type="choice",
                       choices=['analysis','production'],
                       help="activity filter ('analysis' [default] or 'production')")
    parser.add_option("-q", "--quiet",
                       dest="loglevel",
                       default=logging.WARNING,
                       action="store_const",
                       const=logging.WARNING,
                       help="Set logging level to WARNING [default]")
    parser.add_option("-v", "--info",
                       dest="loglevel",
                       default=logging.WARNING,
                       action="store_const",
                       const=logging.INFO,
                       help="Set logging level to INFO [default WARNING]")

    (options, args) = parser.parse_args()

    logger = logging.getLogger()
    logger.setLevel(options.loglevel)
    fmt = '[APF:%(levelname)s %(asctime)s] %(message)s'
    formatter = logging.Formatter(fmt, '%T')
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(formatter)
    logger.handlers = []
    logger.addHandler(handler)
    
    msg = 'Cloud: %s' % options.cloud.upper()
    logging.info(msg)
    msg = 'Activity: %s' % options.activity
    logging.info(msg)
    url = 'http://atlas-agis-api.cern.ch/request/pandaqueue/query/list/?json&preset=schedconf.all&vo_name=atlas'
    if options.cloud.upper() != 'ALL':
        url += '&cloud=%s' % options.cloud.upper()
    logging.info(url)

    handle = urlopen(url)
    d = json.load(handle, 'utf-8')
    handle.close()

    print "# This is apf-agis-config: $Id$"
    print "# auto-generated by: agis.py %s" % ' '.join(sys.argv[1:])

    print defaultsection
    
    # loop through PandaQueues
    for key in sorted(d):
        try:
            if d[key]['resource_type'] != 'GRID':
                print
                print "# Excluded: %s/%s resource_type = %s" % (d[key]['site'], key, d[key]['resource_type'])
                continue
            if d[key]['vo_name'] != 'atlas':
                print
                print "# NOT ATLAS: %s" % key
                continue
            if d[key]['site_state'] == 'ACTIVE' and d[key]['type'] == options.activity:

                wmsqueue = d[key]['panda_resource']
                cetype = d[key]['type']
                memory = d[key]['memory']
                maxtime = d[key]['maxtime']
                maxmemory = d[key]['maxmemory']
                corecount = d[key]['corecount']
                
                for q in d[key]['queues']:
                    if q['ce_state'] != 'ACTIVE':
                        print
                        print "# Queue ce_state not 'ACTIVE': %s (%s)" % (q['ce_name'], q['ce_state'])
                        continue
                    if q['ce_status'] != 'production':
                        print
                        print "# Queue ce_status not 'production': %s (%s)" % (q['ce_name'], q['ce_status'])
                        continue
                    if q['ce_queue_status'] not in ["", 'Production']:
                        print
                        print "# Queue ce_queue_status not 'Production': %s (%s)" % (q['ce_name'], q['ce_queue_status'])
                        continue
                    gramqueue = None 
                    nordugridrsl = None 
                    submitplugin = None
                    submitpluginstring = None
                    gramqueue = None
                    gramversion = None
                    creamenv = None
                    creamattr = ''
                    maxwctime = q['ce_queue_maxwctime']
            
                    if q['ce_flavour'] == 'OSG-CE':
            
                        gridresource = '%s/jobmanager-%s' %(q['ce_endpoint'], q['ce_jobmanager'])
                        if q['ce_version'] == 'GT2':
                            submitplugin = 'CondorGT2'
                            submitpluginstring = 'condorgt2'
                            gramversion = 'gram2'
                        if q['ce_version'] == 'GT5':
                            submitplugin = 'CondorGT5'
                            submitpluginstring = 'condorgt5'
                            gramversion = 'gram5'
                        if q['ce_queue_name']:
                            gramqueue = q['ce_queue_name']
            
                    elif q['ce_flavour'] == 'CREAM-CE':
                        gridresource = '%s/ce-cream/services/CREAM2 %s %s' %(q['ce_endpoint'], q['ce_jobmanager'], q['ce_queue_name'])
                        submitplugin = 'CondorCREAM'
                        submitpluginstring = 'condorcream'
                        creamenv = 'APF_PYTHON26=1 RUCIO_ACCOUNT=pilot'
                        if corecount:
                            creamattr = 'CpuNumber=%d;WholeNodes=false;SMPGranularity=%d;' % (corecount, corecount)
                        if maxmemory and maxwctime:
                            creamattr += 'CERequirements = "other.GlueHostMainMemoryRAMSize > %d ' % maxmemory
                            creamattr += '&& other.GlueHostPolicyMaxWallClockTime >= %d";' % maxwctime
                        elif maxmemory:
                            creamattr += 'CERequirements = "other.GlueHostMainMemoryRAMSize > %d";' % maxmemory
                        elif maxwctime:
                            creamattr += 'CERequirements = "other.GlueHostPolicyMaxWallClockTime >= %d";' % maxwctime

                            
                    elif q['ce_flavour'] == 'LCG-CE':
                        print
                        print "# Skipping GT2 queue: %s (%s)" % (key, q['ce_queue_id'])
                        continue
                        gridresource = '%s/jobmanager-%s' %(q['ce_endpoint'], q['ce_jobmanager'])
                        submitplugin = 'CondorGT2'
                        submitpluginstring = 'condorgt2'
                        gramversion = 'gram2'
                        gramqueue = q['ce_queue_name']
                        
                    elif q['ce_flavour'] == 'ARC-CE':
                        # ignore :port part
                        gridresource = q['ce_endpoint'].split(':')[0]
                        submitplugin = 'CondorNordugrid'
                        submitpluginstring = 'condornordugrid'
                        nordugridrsl = '(jobname = arc_pilot)'
                        rsladd = '(runtimeenvironment = APPS/HEP/ATLAS-SITE-LCG)(runtimeenvironment = ENV/PROXY)'
                        rsladd += '(jobname = arc_pilot)'
                        if corecount:
                            rsladd += '(count = %d)' % corecount
                            rsladd += '(countpernode = %d)' % corecount
                        if maxmemory and corecount:
                            percore = maxmemory/corecount
                            rsladd += '(memory = %d)' % percore
                        elif memory:
                            rsladd += '(memory = %d)' % memory
                        if maxtime:
                            rsladd += '(walltime = %d)' % maxtime
                        if maxtime and corecount:
                            totaltime = maxtime*corecount
                            rsladd += '(cputime = %d)' % totaltime
                    else:
                        print
                        print "# Unknown ce_flavour (%s) for %s (%s)" % (q['ce_flavour'], q['ce_name'], q['ce_queue_id'])
                        continue
            
                    print
                    print '[%s-%s]' % (d[key]['nickname'], q['ce_queue_id'])
                    print 'enabled = True'
                    print 'batchqueue = %s' % key
                    print 'wmsqueue = %s' % wmsqueue
                    print 'memory = %s' % memory
                    print 'batchsubmitplugin = %s' % submitplugin
                    print 'batchsubmit.%s.gridresource = %s' % (submitpluginstring, gridresource)
                    print 'sched.maxtorun.maximum = %d' % 9999
                    print 'sched.maxpercycle.maximum = 25'
                    if creamenv:
                        print 'batchsubmit.condorcream.environ = %s' % creamenv
                        if creamattr:
                            print 'creamattr = %s' % creamattr
                            print 'batchsubmit.condorcream.condor_attributes = %(req)s,%(hold)s,%(remove)s,cream_attributes = %(creamattr)s'
                        else:
                            print 'batchsubmit.condorcream.condor_attributes = %(req)s,%(hold)s,%(remove)s'
                    if nordugridrsl:
                        print 'batchsubmit.condornordugrid.nordugridrsl = %s' % nordugridrsl
                        print 'nordugridrsl.nordugridrsladd = %s' % rsladd
                        print 'nordugridrsl.queue = %s' % q['ce_queue_name']
                        print 'nordugridrsl.addenv.RUCIO_ACCOUNT = pilot'
                        print 'nordugridrsl.addenv.APF_PYTHON26 = 1'
                    if gramqueue:
                        print 'globusrsl.%s.queue = %s' % (gramversion, gramqueue)
                    if cetype == 'analysis':
                        print 'batchsubmit.%s.proxy = atlas-analysis' % submitpluginstring
                        print 'executable.arguments = %(executable.defaultarguments)s -u user'
                    elif cetype == 'production':
                        print 'batchsubmit.%s.proxy = atlas-production' % submitpluginstring
                        print 'executable.arguments = %(executable.defaultarguments)s'


        except KeyError, e:
          print '# Key error: %s' % e
          print

if __name__ == "__main__":
    sys.exit(main())
