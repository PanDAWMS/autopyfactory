#!/bin/bash
#
#	/etc/rc.d/init.d/proxymanager
#
# Starts the proxymanager daemon
#
# chkconfig: 345 26 74
# description: Submit pilot jobs to grid sites. 
# processname: proxymanager
# config: /etc/apf/proxy.conf 
# pidfile: /var/run/proxymanager.pid
#
#

### BEGIN INIT INFO
# Provides: factory.py
# Required-Start: $syslog $local_fs
# Required-Stop: $syslog $local_fs
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop proxymanager
# Description: Generate grid/VOMS proxies. 
### END INIT INFO

f_factdir(){
    # little function to find out where actually
    # this script is located.
    # In case of an user custom installation it could
    # be in a place different that both /etc/init.d/ or the $HOME dir.
    # The current location is recorded in variable FACTDIR
    
    OLD_DIR=$PWD
    DIRPATH=`dirname $0`
    cd $DIRPATH
    FACTDIR=$PWD
    cd $OLD_DIR
}

# Source function library.
# Standard RedHat
if [ -f /etc/rc.d/init.d/functions ]; then
   . /etc/rc.d/init.d/functions
fi

# Use LSB locations for e.g. SuSE
if [ -f /lib/lsb/init-functions ]; then
   . /lib/lsb/init-functions
fi

# Source standard environment
for i in /etc/profile.d/*.sh; do
    if [ -r "$i" ]; then
            . $i >/dev/null 2>&1
    fi
done

# Determine usage context and set paths accordingly.  
#   -- for root it means RPM
#   -- for non-root, the head of the path tree can be calculated from the output of f_factdir
#      the relative paths for the rest of files are like ../bin, ../var, etc.

f_factdir

if [ `id -u` = 0 ]; then
    SYSCONF=/etc/sysconfig/proxymanager.sysconfig
    BINDIR=/usr/bin
    ETCDIR=/etc/apf
    PIDFILE=/var/run/proxymanager.pid
else
    APFHEAD=`dirname $FACTDIR`

    SYSCONF=$APFHEAD/etc/proxymanager.sysconfig
    BINDIR=$APFHEAD/bin
    ETCDIR=$APFHEAD/etc
    PIDFILE=$APFHEAD/var/run/proxymanager.pid
fi

CONFFILE=$ETCDIR/proxy.conf

# Source settings from sysconfig
# overriding default if present

if [ -f $SYSCONF ]; then
   . $SYSCONF
fi

if [ -f /etc/profile ]; then
   . /etc/profile
fi

if [ -n "$GRIDSETUP" ]; then
   . $GRIDSETUP
fi



RETVAL=0
#
# See how we were called.
#
check() {
	
	# Check if proxymanager.py is executable
	test -x $BINDIR/proxymanager || exit 5
}

create_var_run(){
    # function to create directory  $APFHEAD/var/run 
    # if it does not exist. 
    # It is needed to place the file factory.pid 
    if [ ! -d $APFHEAD/var/run/ ]; then
        mkdir -p $APFHEAD/var/run/
    fi
}

start() {
	# Check if it is already running
	if [ ! -f $PIDFILE ]; then
		echo -n $"Starting Proxymanager daemon: "	
        create_var_run
	    # daemon --pidfile=${PIDFILE} "$BINDIR/proxymanager --conf $CONFFILE $OPTIONS "
        if [ -n "$CONSOLE_LOG" ]; then
        	$BINDIR/proxymanager --conf $CONFFILE $OPTIONS >> $CONSOLE_LOG 2>&1 &
        else
            $BINDIR/proxymanager --conf $CONFFILE $OPTIONS &
        fi
        
        # NOTE: $OPTIONS is defined in proxymanager.sysconfig
        RETVAL=$?
	    [ $RETVAL -eq 0 ] && echo $! > $PIDFILE
	    [ "$?" -eq 0 ] && success $"proxymanager startup" || failure $"proxymanager startup"
	    echo
	else
	    echo "$0: PID file exists: $PIDFILE" 
	fi
	return $RETVAL
}

stop() {

	check
	echo -n $"Stopping Proxymanager daemon: "
	killproc -p $PIDFILE factory
	RETVAL=$?
	[ $RETVAL -eq 0 ] && rm -f $PIDFILE
	echo
    return $RETVAL
}


restart() {
	stop
	sleep 2
	start
	RETVAL=$?
	return $RETVAL
}	

reload() {

	check
	
	trap "" SIGHUP
	action $"Reloading Proxymanager daemon:" killall -HUP proxymanager.py
	RETVAL=$?
	return $RETVAL
}	

case "$1" in
start)
	start
	;;
stop)
	stop
	;;
reload)
	echo "$0: Unimplemented feature."
    RETVAL=3
	;;
force-reload)
	echo "$0: Unimplemented feature."
	RETVAL=3
	;;
restart)
	restart
	;;
condrestart)
	if [ -f /var/lock/subsys/proxymanager ]; then
	    restart
	fi
	;;
status)
	status factory
	RETVAL=$?
	;;
*)
	echo $"Usage: $0 {start|stop|status|restart|condrestart|reload|force-reload}"
	RETVAL=2
esac

exit $RETVAL
