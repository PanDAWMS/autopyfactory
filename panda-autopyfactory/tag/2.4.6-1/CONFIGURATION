AutoPyFactory CONFIGURATION

INTRODUCTION

Configuration of APF functionality is handled through four files, whose
locations depend on method of installation:

FILE                RPM LOCATION            USER LOCATION  
---------------------------------------------------------
factory.sysconfig   /etc/sysconfig/         <apfhead>/etc/
factory.conf        /etc/apf                <apfhead>/etc/
queues.conf         /etc/apf                <apfhead>/etc/
proxy.conf          /etc/apf                <apfhead>/etc/

where <apfhead> is the directory indicated at the momment of deploying APF with distutils:

    $ python setup.py install -home=<apfhead>

For factory.conf, queues.conf, and proxy.conf files, simply copy the 
example files within the etc/ directory, removing the '-example' suffix. Edit 
each file in turn, following the instructions below and the commented hints 
within the config files. 

FILE SPECIFIC SETUP

/etc/sysconfig/factory.sysconfig: 

This file determines several top-level run options. By default it runs with debug enabled. 
Examine the file for a couple examples. IMPORTANT: If you have a grid environment already set
up for root, then comment out GRIDSETUP in the sysconfig, otherwise you must point to
a valid grid client setup, e.g. an OSG-Client setup.sh. 

This file includes also the location of the APF log files. 

/etc/apf/factory.conf: 

This file governs overall factory run parameters. At a minimum factoryOwner, factoryID, 
and monitorURL, and baseLogUrl hostname must be customized. All other values should
be valid for the RPM install. Note that submit system logfiles are now exported natively by
APF using a built-in Python HTTP server. No need to set up Apache to export these directories. 

This file includes also the location of the proxy.conf and queues.conf files.

/etc/apf/queues.conf:

This file defines APF submission queues. Usually these will be one-to-one with Panda queues, 
but don't have to be. Details of valid parameters are commented in the file. In the
simplest case, create a section named for the Panda site you wish to serve, e.g. [BNL_ATLAS_1]. 

Valid site names are listed here:
  http://panda.cern.ch/server/pandamon/query?dash=site

If no other variables are set, all info for submission will be pulled from the Panda 
server schedconfig info. 


/etc/apf/proxy.conf:

This file governs the operation of the integrated proxy generation and management component. 
The key question to be answered here is if you: 
1) want to independently generate a long-lived vanilla proxy, and define baseproxy in this file.
2) want to let the proxymanager automatically generate VOMS proxies directly from your user
cert and key files.

If the former, you must create the long-lived proxy *as the user APF will run as*. E.g.
  grid-proxy-init -valid 720:0 -out /tmp/plainProxy
This creates a plain proxy valid for 30 days. Don't forget to manually renew it at least 7 days
before it expires.  

If the latter, we assume the key has had its password removed. Use this command to create
the file:
   openssl rsa -in ~/.globus/userkey.pem -out ~/.globus/userkeynopw.pem
Note that this is no less secure than having password-handling within APF, and less subject to
errors. 

 
NETWORKING

If you are in a firewalled/NAT environment, make sure that whatever ports are necessary are open. For 
standard grid submission, we use 20000-30000. On EC2 this will need to be defined in the security group 
for the node. 








